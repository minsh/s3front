#!/usr/bin/env node

'use strict';

const program = require('commander');
const pkg = require('../package.json');
const version = pkg.version;
const s3 = require('s3');
const AWS = require('aws-sdk');
const wrench = require('wrench');
const fs = require('fs-extra');
const inspect = require('eyes').inspector({maxLength: -1});
const ProgressBar = require('progress');
const async = require('async');
const cloudfront = require('cloudfront');
const uuid = require('uuid');
const _ = require('underscore');
const cache = require('../lib/cache');

/* CLI */

program
  .version(version)
  .option('-k, --key <key>',                  'aws key access id')
  .option('-s, --secret <secret>',            'aws secret access key')
  .option('-b, --bucket <name>',              'bucket name')
  .option('-q, --quiet',                      'quiet mode')
  .option('-r, --region <name>',              'region if not in US standard')
  .option('-c, --cachecontrol <stringvalue>', 'cache control aws putObject param')
  .option('-i, --invalidate',                 'after upload find first cloudfront distribution which has an alias similar to the bucket name and invalidates its content')
  .parse(process.argv);

/* ensure required parameters */
if (!program.key) throw new Error('--key required');
if (!program.secret) throw new Error('--secret required');
if (!program.bucket) throw new Error('--bucket required');

console.log('\n');

cache.init(program.bucket);

program.region = program.region || 'us-east-1';

/* use newest sdk to avoid: https://github.com/andrewrk/node-s3-client/issues/69 */
const awsS3Client = new AWS.S3({
  accessKeyId: program.key,
  secretAccessKey: program.secret,
  region: program.region,
  signatureVersion: program.region === 'us-east-1' ? 'v2' : 'v4'
});

const s3Client = s3.createClient({s3Client: awsS3Client});

/* get all all relative file paths (omit directories) */
const files = wrench.readdirSyncRecursive('.').filter(f => !fs.statSync(f).isDirectory());

const quiet = (program.quiet) ? true : false;

/* setup progress bar */
const bar = new ProgressBar('  uploading [:bar] :percent :etas', {complete: '=', incomplete: ' ', width: 40, total: files.length});

/* upload files by batch */
const batchSize = 20;

const q = async.queue((file, cb) => {
  cache.is(file, there => {
    if (there) { 
      if (!quiet) { bar.tick(); }
      return cb(); 
    }

    const params = {
      localFile: file,
      s3Params: {
        Bucket: program.bucket,
        Key: file,
        ACL: 'public-read'
      },
    };
    if (program.cachecontrol) { params.s3Params['CacheControl'] = program.cachecontrol; }

    /* `.well-known/apple-app-site-association` gets a forced JSON content-type */
    if (file === '.well-known/apple-app-site-association') { params.s3Params.ContentType = 'application/json'; }

    const uploader = s3Client.uploadFile(params);

    uploader.on('error', cb);
    uploader.on('end', () => {
      cache.uploaded(file);
      if (!quiet) { bar.tick(); }

      return cb(null);
    });
  });
}, batchSize /* concurrency */);

q.drain = () => {
  /* cloudfront invalidation */
  if (program.invalidate){
    const cf = cloudfront.createClient(program.key, program.secret);
    cf.listDistributions((err, list, info) => {
      let distributionId = null;
      /* find first distribution id which has an alias similar to bucket name. */
      list.some(d => {
        return d.config.aliases.some(a => {
          if (a === program.bucket) {
            distributionId = d.id;
            return true;
          }
        });
      });
      /* invalidate content if distribution has been found */
      if (distributionId) {
        cf.createInvalidation(distributionId, uuid.v4(), '/.', (err, invalidation) => {
          if (err) inspect(err)
          console.log('\n\n  invalidation status:',invalidation.status);
          process.exit();
        });
      }
    });
  } else {
    process.exit();
  }
};

files.forEach(file => {
  q.push(file, err => {
    if (err) {
      inspect(err);
      process.exit();
    }
  });  
});

process.on('exit', () => { 
  console.log('\n'); 
});

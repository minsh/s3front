#!/usr/bin/env node

/* module dependencies */

var program     = require('commander'), 
    pkg         = require('../package.json'),
    version     = pkg.version, 
    knox        = require('knox'), 
    wrench      = require('wrench'), 
    fs          = require('fs-extra'), 
    inspect     = require('eyes').inspector({maxLength: -1}), 
    ProgressBar = require('progress'), 
    async       = require('async'), 
    cloudfront  = require('cloudfront'), 
    uuid        = require('node-uuid'), 
    _           = require('underscore'),
    cache       = require('../lib/cache');

/* CLI */

program
  .version(version)
  .option('-k, --key <key>',        'aws key access id')
  .option('-s, --secret <secret>',  'aws secret access key')
  .option('-b, --bucket <name>',    'bucket name')
  .option('-q, --quiet',            'quiet mode')
  .option('-r, --region <name>',    'region if not in US standard')
  .option('-i, --invalidate',       'after upload find first cloudfront distribution which has an alias similar to the bucket name and invalidates its content')
  .parse(process.argv);

/* ensure required parameters */
if (!program.key) throw new Error('--key required');
if (!program.secret) throw new Error('--secret required');
if (!program.bucket) throw new Error('--bucket required');

console.log('\n');

cache.init(program.bucket);

var s3 = knox.createClient({
  key:program.key,
  secret:program.secret,
  bucket:program.bucket,
  region:(program.region) ? program.region : 'us-standard'
});

/* get all files and directory */
var files = wrench.readdirSyncRecursive('.');
/* remove directories */
files = files.filter(function(f){
  return !fs.statSync(f).isDirectory();
});
var nbFiles = files.length;

var quiet = (program.quiet) ? true : false;

/* setup progress bar */
var bar = new ProgressBar('  uploading [:bar] :percent :etas', {
    complete: '='
  , incomplete: ' '
  , width: 80
  , total: nbFiles
});

/* upload files by batch */
var batchSize = 10,
  cnt = 0,
  uploadCnt = 0,
  tasks = [];

//if (!program.quiet) { console.log('# files',files.length); }

var testCnt = 0;
_.range(Math.ceil(nbFiles / batchSize)).forEach(function(idx){
  tasks.push(function(cb){
    var uploads = [];
    for ( ; cnt < (idx+1)*batchSize && cnt < nbFiles; ++cnt){
      uploads.push(function(cb){
        var file = files[uploadCnt++];
        cache.is(file, function(there) {
          if (there) { 
            if (!quiet) { bar.tick(); }
            return cb(); 
          }
          s3.putFile(file, '/'+file, { 'x-amz-acl': 'public-read' }, function(err, res){
            if (err) { return cb(err); }
            if (res.statusCode !== 200) { console.log(res.statusCode); }
            if (!quiet) { bar.tick(); }
            //if (!program.quiet) { console.log(testCnt++,file); }

            /* tell the cache */
            cache.uploaded(file);
            return cb();
          });
        });
      });
    }
    async.parallel(uploads, function(err){ cb(err); });
  });
});

async.series(tasks, function(err){
  if (err) {
    inspect(err);
    process.exit();
  }

  /* cloudfront invalidation */
  if (program.invalidate){
    var cf = cloudfront.createClient(program.key, program.secret);
    cf.listDistributions(function(err, list, info) {
      var distributionId = null;
      /* find first distribution id which has an alias similar to bucket name. */
      list.some(function(d){
        return d.config.aliases.some(function(a){
          if (a === program.bucket) {
            distributionId = d.id;
            return true;
          }
        });
      });
      /* invalidate content if distribution has been found */
      if (distributionId) {
        cf.createInvalidation(distributionId, uuid.v4(), '/.', function(err, invalidation){
          if (err) inspect(err)
          console.log('\n\n  invalidation status:',invalidation.status);
          process.exit();
        });
      }
    });
  } else {
    process.exit();
  }
});

process.on('exit', function(){
  console.log('\n');
});
